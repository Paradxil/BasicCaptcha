class {
    onCreate(input) {
        this.state = {
            id: null,
            img: null,
            host: input.host,
            submit: false,
            error: false,
            loaded: false,
            loading: false,
            expires: null,
            expired: false
        };
    }
    onMount() {
        setInterval(() => {this.setStateDirty('expires');}, 500);
    }
    loadNewCaptcha() {
        this.state.loaded = false;
        this.loadCaptcha();
    }
    loadCaptcha() {
        if((this.state.loaded && !this.state.expired) || this.state.loading) {
            return;
        }
        this.state.loading = true;
        this.state.id = null;
        this.state.img = null;
        this.state.loaded = false;
        this.state.expires = null;
        this.state.error = false;
        this.state.submit = false;
        this.state.expired = false;

        const options = {
            method: 'GET',
        };

        fetch(this.state.host + '/captcha/img', options).then(response => response.json()).then((data) => {
            if(data !== null && data.captchaid && data.img) {
                this.state.id = data.captchaid;
                this.state.img = data.img;
                this.state.loaded = true;
                this.state.loading = false;
                this.state.expires = data.expires;
                window.parent.postMessage({captchaid: this.state.id},"*");
            }
            else {
                this.state.error = true;
            }
        });
    }
    submitCaptcha(event) {
        if(this.state.submit || this.state.expired) {
            return;
        }
        this.state.submit = true;

        const params = {
            x: event.offsetX,
            y: event.offsetY,
            id: this.state.id
        };

        const options = {
            headers: {
                'Content-Type': 'application/json'
            },
            method: 'POST',
            body: JSON.stringify(params)
        };

        fetch(this.state.host + '/captcha', options).then(response => {
            if(response.status === 200) {
                this.state.submit = true;
            }
            else {
                this.state.error = true;
            }
        });
    }
}

style {
    .captcha-wrapper {
        user-select: none;
        font-family: sans-serif;
        display: flex;
        flex-direction: column;
        width: calc(300px + 4px);
    }

    .captcha-message {
        position: absolute;
        text-align: center;
    }

    .not-loaded .captcha-image, .captcha-error .captcha-image{
        background-color: #f1f1f1;
    }

    .captcha-image {
        transition: 0.25s border;
        border: 2px solid rgba(0,0,0,0);
        border-radius: 8px;
        box-shadow: 0px 0px 5px rgba(0,0,0,0.25);
        height: 100px;
        width: 300px;
        display: flex;
        flex-direction: column;
        place-content: center;
        align-items: center;
        overflow: hidden;
    }

    .captcha-submit .captcha-image{
        border-color: lightgreen;
    }

    .captcha-image img {
        transition: filter 0.25s, opacity 0.25s;
    }

    .captcha-submit img, .captcha-error img {
        filter: blur(15px);
        opacity: 0.5;
    }

    .captcha-error .captcha-image{
        border-color: lightcoral;
    }

    .loading {
        background-color: #aaa;
        border-radius: 4px;
        width: 15px;
        height: 15px;
        animation-name: loading;
        animation-duration: 0.35s;
        animation-timing-function: ease-in-out;
        animation-iteration-count: infinite;
    }

    @keyframes loading {
        from {transform: rotate(0deg);}
        to {transform: rotate(90deg);}
    }

    .captcha-footer {
        display: flex;
        margin-top: 2px;
    }

    .captcha-footer div, .captcha-footer p {
        margin: 0px;
        padding: 0px;
        font-size: 10px;
        color: #555;
        transition: color 0.25s;
    }

    .captcha-footer div {
        flex: 1;
        display: flex;
        place-content: center;
        align-items: center;
    }

    .captcha-footer p:hover {
        color: #111;
    }

    .captcha-footer a {
        text-decoration: none;
        color: inherit;
        cursor: pointer;
    }

    .help {
        border-bottom: 1px #555 dotted;
    }

    .right {
        text-align: right;
    }

    .center {
        text-align: center;
    }
}

div.captcha-wrapper class={"captcha-submit": state.submit, "captcha-error": state.error, "not-loaded": !state.loaded}
    div.captcha-image title=state.submit?"Only one submission allowed. If you clicked the wrong symbol try a new captcha by clicking refresh below.":"" on-mouseenter("loadCaptcha")
        div.captcha-message
            if(!state.loaded)
                if(state.loading)
                    div.loading
                else
                    div -- CAPTCHA
                    div -- hover to load
            else-if(state.expired)
                div -- CAPTCHA EXPIRED
                div -- hover to load a new captcha
            else-if(state.submit)
                div -- CAPTCHA SUBMIT
                div -- to try a new captcha click refresh
        img draggable='false' src=state.img on-click("submitCaptcha")
    div.captcha-footer
        div
            p.help title="Click to load a new captcha." on-click("loadNewCaptcha") 
                a -- refresh
        div.center
            p.help title="Click to learn more about this captcha."
                a -- about this captcha
        div.right
            $ let time = "time";
            $ if(state.expires) {
                let totalSeconds = Math.floor(state.expires - (Date.now()/1000));
                let minutes = Math.floor(totalSeconds / 60);
                let seconds = totalSeconds - (minutes * 60);

                time = "";
                if(totalSeconds > 0) {
                    if(minutes > 0) {
                        time = minutes + ":";
                    }
                    if(seconds >= 10 || minutes <= 0) {
                        time += seconds;
                    }
                    else if(seconds >= 0) {
                        time += "0" + seconds;
                    }
                }
                else {
                    time = "expired";
                    state.error = true;
                    state.expired = true;
                }
            }
            p.help title="Time until the captcha exires." -- ${time}